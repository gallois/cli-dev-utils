use std::{
    collections::HashMap,
    fmt::{Display, Formatter},
};
use strum_macros::{EnumIter, EnumString, EnumVariantNames};

#[derive(EnumIter, EnumString, EnumVariantNames)]
#[strum(serialize_all = "lowercase")]
pub enum RegexAction {
    Email,
    Url,
    IPv4,
    IPv6,
    IPvX,
    Date,
    Time,
}

#[derive(Debug)]
pub enum RegexError {
    InvalidDateFormat(String),
    InvalidTimeFormat(String),
}

impl Display for RegexError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

pub fn email() -> String {
    r"^[\w\-\.]+@([\w-]+\.)+[\w-]{2,}$".to_string()
}

pub fn url() -> String {
    r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$"
        .to_string()
}

pub fn ipv4() -> String {
    r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$".to_string()
}

pub fn ipv6() -> String {
    r"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$".to_string()
}

pub fn ipvx() -> String {
    r"^((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))$".to_string()
}

pub fn date(date_format: &str) -> Result<String, RegexError> {
    let date_format_map = HashMap::from([
        (
            "YYYY-MM-dd",
            r"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYY/MM/dd",
            r"^([12]\d{3}/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYY.MM.dd",
            r"^([12]\d{3}\.(0[1-9]|1[0-2])\.(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYYMMdd",
            r"^([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "dd-MM-YYYY",
            r"^((0[1-9]|[12]\d|3[01]))-(0[1-9]|1[0-2])-[12]\d{3}$",
        ),
        (
            "dd/MM/YYYY",
            r"^((0[1-9]|[12]\d|3[01]))/(0[1-9]|1[0-2])/[12]\d{3}$",
        ),
        (
            "dd.MM.YYYY",
            r"^((0[1-9]|[12]\d|3[01]))\.(0[1-9]|1[0-2])\.[12]\d{3}$",
        ),
        (
            "ddMMYYYY",
            r"^((0[1-9]|[12]\d|3[01]))(0[1-9]|1[0-2])[12]\d{3}$",
        ),
        (
            "MM-dd-YYYY",
            r"^(0[1-9]|1[0-2])-((0[1-9]|[12]\d|3[01]))-[12]\d{3}$",
        ),
        (
            "MM/dd/YYYY",
            r"^(0[1-9]|1[0-2])/((0[1-9]|[12]\d|3[01]))/[12]\d{3}$",
        ),
        (
            "MM.dd.YYYY",
            r"^(0[1-9]|1[0-2])\.((0[1-9]|[12]\d|3[01]))\.[12]\d{3}$",
        ),
        (
            "MMddYYYY",
            r"^(0[1-9]|1[0-2])((0[1-9]|[12]\d|3[01]))[12]\d{3}$",
        ),
        (
            "dd-mmm-yyyy",
            r"^(?:(?:31-(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)-(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29-(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])-(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$",
        ),
        (
            "dd.mmm.yyyy",
            r"^(?:(?:31\.(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)\.(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29\.(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])\.(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$",
        ),
        (
            "dd/mmm/yyyy",
            r"^(?:(?:31/(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)/(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29/(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])/(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$",
        ),
    ]);
    if let Some(regex) = date_format_map.get(date_format) {
        Ok(regex.to_string())
    } else {
        Err(RegexError::InvalidDateFormat(format!(
            // FIXME improve display of valid formats
            "Invalid date format: {}. Valid formats: {:?}",
            date_format,
            date_format_map.keys()
        )))
    }
}

pub fn time(time_format: &str) -> Result<String, RegexError> {
    let time_format_map = HashMap::from([
        ("hh:mm 12", r"^(0?[1-9]|1[0-2]):[0-5][0-9]$"),
        (
            "hh:mm am/pm",
            r"^((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$",
        ),
    ]);
    if let Some(regex) = time_format_map.get(time_format) {
        Ok(regex.to_string())
    } else {
        Err(RegexError::InvalidTimeFormat(format!(
            // FIXME improve display of valid formats
            "Invalid time format: {}. Valid formats: {:?}",
            time_format,
            time_format_map.keys()
        )))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_email() {
        assert_eq!(email(), r"^[\w\-\.]+@([\w-]+\.)+[\w-]{2,}$")
    }
    #[test]
    fn test_url() {
        assert_eq!(
            url(),
            r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$"
        )
    }

    #[test]
    fn test_ipv4() {
        assert_eq!(
            ipv4(),
            r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
        )
    }

    #[test]
    fn test_ipv6() {
        assert_eq!(
            ipv6(),
            r"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
        )
    }

    #[test]
    fn test_ipvx() {
        assert_eq!(
            ipvx(),
            r"^((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))$"
        )
    }

    #[test]
    fn test_date() {
        let mut result = date("YYYY-MM-dd");
        // YYYY MM dd variations
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYY/MM/dd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYY.MM.dd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}\.(0[1-9]|1[0-2])\.(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYYMMdd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        // dd MM YYYY variations
        result = date("dd-MM-YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))-(0[1-9]|1[0-2])-[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("dd/MM/YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))/(0[1-9]|1[0-2])/[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("dd.MM.YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))\.(0[1-9]|1[0-2])\.[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("ddMMYYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))(0[1-9]|1[0-2])[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }
        // MM dd YYYY variations
        result = date("MM-dd-YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^(0[1-9]|1[0-2])-((0[1-9]|[12]\d|3[01]))-[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("MM/dd/YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^(0[1-9]|1[0-2])/((0[1-9]|[12]\d|3[01]))/[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("MM.dd.YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^(0[1-9]|1[0-2])\.((0[1-9]|[12]\d|3[01]))\.[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("MMddYYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^(0[1-9]|1[0-2])((0[1-9]|[12]\d|3[01]))[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }
        result = date("dd-mmm-yyyy");
        match result {
            Ok(s) => assert_eq!(
                s,
                r"^(?:(?:31-(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)-(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29-(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])-(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$",
            ),
            Err(e) => panic!("{:#?}", e),
        }
        result = date("dd.mmm.yyyy");
        match result {
            Ok(s) => assert_eq!(
                s,
                r"^(?:(?:31\.(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)\.(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29\.(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])\.(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"
            ),
            Err(e) => panic!("{:#?}", e),
        }
        result = date("dd/mmm/yyyy");
        match result {
            Ok(s) => assert_eq!(
                s,
                r"^(?:(?:31/(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)/(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29/(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])/(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})$"
            ),
            Err(e) => panic!("{:#?}", e),
        }
    }

    #[test]
    fn test_time() {
        let mut result = time("hh:mm 12");
        match result {
            Ok(s) => assert_eq!(s, "^(0?[1-9]|1[0-2]):[0-5][0-9]$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = time("hh:mm am/pm");
        match result {
            Ok(s) => assert_eq!(s, "^((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))$"),
            Err(e) => panic!("{:#?}", e),
        }
    }
}
