use std::{
    collections::HashMap,
    fmt::{Display, Formatter},
};
use strum_macros::{EnumIter, EnumString, EnumVariantNames};

#[derive(EnumIter, EnumString, EnumVariantNames)]
#[strum(serialize_all = "lowercase")]
pub enum RegexAction {
    Email,
    Url,
    IPv4,
    IPv6,
    IPvX,
    Date,
}

#[derive(Debug)]
pub enum RegexError {
    InvalidDateFormat(String),
}

impl Display for RegexError {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

pub fn email() -> String {
    r"^[\w\-\.]+@([\w-]+\.)+[\w-]{2,}$".to_string()
}

pub fn url() -> String {
    r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$"
        .to_string()
}

pub fn ipv4() -> String {
    r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$".to_string()
}

pub fn ipv6() -> String {
    r"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$".to_string()
}

pub fn ipvx() -> String {
    r"^((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))$".to_string()
}

pub fn date(date_format: &str) -> Result<String, RegexError> {
    let date_format_map = HashMap::from([
        (
            "YYYY-MM-dd",
            r"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYY/MM/dd",
            r"^([12]\d{3}/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYY.MM.dd",
            r"^([12]\d{3}.(0[1-9]|1[0-2]).(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "YYYYMMdd",
            r"^([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$",
        ),
        (
            "dd-MM-YYYY",
            r"^((0[1-9]|[12]\d|3[01]))-(0[1-9]|1[0-2])-[12]\d{3}$",
        ),
        (
            "dd/MM/YYYY",
            r"^((0[1-9]|[12]\d|3[01]))/(0[1-9]|1[0-2])/[12]\d{3}$",
        ),
        (
            "dd.MM.YYYY",
            r"^((0[1-9]|[12]\d|3[01])).(0[1-9]|1[0-2]).[12]\d{3}$",
        ),
        (
            "ddMMYYYY",
            r"^((0[1-9]|[12]\d|3[01]))(0[1-9]|1[0-2])[12]\d{3}$",
        ),
    ]);
    if let Some(regex) = date_format_map.get(date_format) {
        Ok(regex.to_string())
    } else {
        Err(RegexError::InvalidDateFormat(format!(
            // FIXME improve display of valid formats
            "Invalid date format: {}. Valid formats: {:?}",
            date_format,
            date_format_map.keys()
        )))
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_email() {
        assert_eq!(email(), r"^[\w\-\.]+@([\w-]+\.)+[\w-]{2,}$")
    }
    #[test]
    fn test_url() {
        assert_eq!(
            url(),
            r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$"
        )
    }

    #[test]
    fn test_ipv4() {
        assert_eq!(
            ipv4(),
            r"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$"
        )
    }

    #[test]
    fn test_ipv6() {
        assert_eq!(
            ipv6(),
            r"^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
        )
    }

    #[test]
    fn test_ipvx() {
        assert_eq!(
            ipvx(),
            r"^((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))$"
        )
    }

    #[test]
    fn test_date() {
        let mut result = date("YYYY-MM-dd");
        // YYYY MM dd variations
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYY/MM/dd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}/(0[1-9]|1[0-2])/(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYY.MM.dd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}.(0[1-9]|1[0-2]).(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("YYYYMMdd");
        match result {
            Ok(s) => assert_eq!(s, r"^([12]\d{3}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01]))$"),
            Err(e) => panic!("{:#?}", e),
        }

        // dd MM YYYY variations
        result = date("dd-MM-YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))-(0[1-9]|1[0-2])-[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("dd/MM/YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))/(0[1-9]|1[0-2])/[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("dd.MM.YYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01])).(0[1-9]|1[0-2]).[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }

        result = date("ddMMYYYY");
        match result {
            Ok(s) => assert_eq!(s, r"^((0[1-9]|[12]\d|3[01]))(0[1-9]|1[0-2])[12]\d{3}$"),
            Err(e) => panic!("{:#?}", e),
        }
        // assert_eq!(date("dd.mmm.YYYY"), r"^$");
    }
}
